<div id="med" class="col-md-9 col-sm-8 col-xs-12 about-middle-col med-admin">

  <h1>Administration: Data upload and push to production</h1>

  <% if defined? errors and errors.size > 0 %>
    <p>Errors Encountered trying to release preview data to production.</p>
    <ul class="about-list">
      <% errors.each do |emsg| %>
        <li><%= emsg %></li>
      <% end %>
    </ul>
  <% end %>


  <h2>Existing collections</h2>
  <table class="admin-table">
    <tr>
      <th>Aliases</th>
      <th>Collection</th>
      <th>Docs</th>
      <th>Created</th>
      <th>Action</th>
    </tr>

    <% collections.each_with_index do |c, i| %>
      <%= render partial: "collection_row", locals: { c: c, i: i} %>
    <% end %>
  </table>

  <% if collections.released? and collections.preview %>
    <h2>Preview and Production currently point to the same data. </h2>
    <p>If new preview data were available to release to production, A "Release" button
      would appear above.</p>
  <% elsif collections.preview.nil? %>
    <h2>No Preview alias/collection found</h2>
    <p>Maybe nothing has ever been uploaded in this application instance? Uploading and indexing
      a new file will address this issue.</p>
  <% else %>
    <h2>Note: There is new data in Preview.</h2>
    <p>You can browse the new data using this preview site. Once you're happy,
      return here and press the "Release" button to have
      production instances start using the new data. There is no downtime, and no change should
      be noticed other than the date change at the bottom of each page.</p>
  <% end %>

  <h2>Upload a new file</h2>
  <p>Upload a new .zip file for indexing.</p>

  <div id="uppy"></div>

  <script type="module">
  import { Uppy, Dashboard, AwsS3 } from "https://releases.transloadit.com/uppy/v4.3.0/uppy.min.mjs"
  function onUploadComplete(result) {
    console.log(
      'Upload complete! We’ve uploaded these files:',
      result.successful,
    )

  }
  function onUploadSuccess(file, data) {
    console.log(
      'Upload success! We’ve uploaded this file:',
      file.meta['name'],
    )
    $("#upload_info").show("slow");
  }

  const uppy = new Uppy({
    restrictions: {
      maxNumberOfFiles: 1,
      allowedFileTypes: [".zip"],
    }
  })
    .use(Dashboard, {
      inline: true,
      target: '#uppy',
      height: '10em'
    })
    .use(AwsS3, {
      shouldUseMultipart(file) {
        return file.size > 5 * 2 ** 20
      },
      endpoint: '<%= Dromedary::Services[:relative_url_root]  %>'
    })

  uppy.on('complete', onUploadComplete)
  uppy.on('upload-success', onUploadSuccess)
  </script>

  <div id="upload_info" style="display: none">
    <p>Indexing generally takes between 60 and 70 minutes.</p>

    <p>You can check back at this page to see if the new data are ready to be viewed.
    Reload it at after about <%= (Time.now + 70*60).strftime("%I:%M %P") %> to see if it's done.</p>

    <p>Indexing will take place in the background. Currently, there's no good way to track its progress;
      this admin page will show the "release" button when it's ready, and this
      overall preview site will be using the newly-indexed data.</p>

  </div>


  <h2>Data update process and how to deal with a failed or incorrect data update</h2>

  <% prea = Dromedary::Services[:preview_alias] %>
  <% proa  = Dromedary::Services[:production_alias] %>

  <p>Solr allows the use of <em>aliases</em> that reference a "real" collection. We take
  advantage of that as follows:
    <ul>
      <li>The preview site always uses the alias <em><%= prea %></em></li>
      <li>The production site always uses the alias <em><%= proa %></em></li>
      <li>Uploading new data creates a brand-new collection and then changes the <em><%= prea %></em>
      alias to point to that new collection.</li>
      <li>"Releasing to production" just means changing the <em><%= proa %></em> alias to point
      at the same data referenced by the <em><%= prea %></em> alias.</li>
    </ul>
  </p>

  <p>So, the "happy path" is:
  <ul>
    <li>Upload data</li>
    <li>Check it in Preview</li>
    <li>Release it to production</li>
  </ul></p>

  <h3>Case 1: the Preview data looks wrong but you haven't Released it</h3>
  <p>Simply upload fixed data. The <em><%= prea %></em> alias will be changed to point
  to the new data, and you can proceed like normal, ignoring the collection with the "bad" data.</p>

  <h3>Case 2: the bad data was Released to production</h3>
  <p>The MEC keeps old solr data around until we delete it using buttons in the table at the
  top of this page.</p>

  <p>You can use the table below to "revert" production data to an earlier collection.
  <em>All this does is change the <em><%= prea %></em> and <em><%= proa %></em> alises to
  point to whichever older collection you pick. <strong>Nothing will be deleted.</strong></p>


  <table class="admin-table">
    <tr>
      <th>Collection</th>
      <th>Docs</th>
      <th>Created</th>
      <th>Action</th>
    </tr>

    <% collections.force_release_candidates.each do |c, i| %>
      <%= render partial: "force_release_row", locals: { c: c} %>
    <% end %>
  </table>

</div>


